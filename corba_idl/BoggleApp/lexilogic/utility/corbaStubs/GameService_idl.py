# Python stubs generated by omniidl from GameService.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


# #include "ProgramUtilities.idl"
import lexilogic.utility.corbaStubs.ProgramUtilities_idl
_0_org = omniORB.openModule("lexilogic.utility.corbaModules.org")
_0_org__POA = omniORB.openModule("lexilogic.utility.corbaModules.org__POA")
_0_org.amalgam = omniORB.openModule("lexilogic.utility.corbaModules.org.amalgam")
_0_org__POA.amalgam = omniORB.openModule("lexilogic.utility.corbaModules.org__POA.amalgam")
_0_org.amalgam.Utils = omniORB.openModule("lexilogic.utility.corbaModules.org.amalgam.Utils")
_0_org__POA.amalgam.Utils = omniORB.openModule("lexilogic.utility.corbaModules.org__POA.amalgam.Utils")
_0_org.amalgam.Utils.Exceptions = omniORB.openModule("lexilogic.utility.corbaModules.org.amalgam.Utils.Exceptions")
_0_org__POA.amalgam.Utils.Exceptions = omniORB.openModule("lexilogic.utility.corbaModules.org__POA.amalgam.Utils.Exceptions")

# #include "UIControllers.idl"
import lexilogic.utility.corbaStubs.UIControllers_idl
_0_org = omniORB.openModule("lexilogic.utility.corbaModules.org")
_0_org__POA = omniORB.openModule("lexilogic.utility.corbaModules.org__POA")
_0_org.amalgam = omniORB.openModule("lexilogic.utility.corbaModules.org.amalgam")
_0_org__POA.amalgam = omniORB.openModule("lexilogic.utility.corbaModules.org__POA.amalgam")
_0_org.amalgam.ControllerException = omniORB.openModule("lexilogic.utility.corbaModules.org.amalgam.ControllerException")
_0_org__POA.amalgam.ControllerException = omniORB.openModule("lexilogic.utility.corbaModules.org__POA.amalgam.ControllerException")
_0_org.amalgam.UIControllers = omniORB.openModule("lexilogic.utility.corbaModules.org.amalgam.UIControllers")
_0_org__POA.amalgam.UIControllers = omniORB.openModule("lexilogic.utility.corbaModules.org__POA.amalgam.UIControllers")

#
# Start of module "org"
#
__name__ = "lexilogic.utility.corbaModules.org"
_0_org = omniORB.openModule("lexilogic.utility.corbaModules.org", r"GameService.idl")
_0_org__POA = omniORB.openModule("lexilogic.utility.corbaModules.org__POA", r"GameService.idl")


#
# Start of module "org.amalgam"
#
__name__ = "lexilogic.utility.corbaModules.org.amalgam"
_0_org.amalgam = omniORB.openModule("lexilogic.utility.corbaModules.org.amalgam", r"GameService.idl")
_0_org__POA.amalgam = omniORB.openModule("lexilogic.utility.corbaModules.org__POA.amalgam", r"GameService.idl")


#
# Start of module "org.amalgam.Service"
#
__name__ = "lexilogic.utility.corbaModules.org.amalgam.Service"
_0_org.amalgam.Service = omniORB.openModule("lexilogic.utility.corbaModules.org.amalgam.Service", r"GameService.idl")
_0_org__POA.amalgam.Service = omniORB.openModule("lexilogic.utility.corbaModules.org__POA.amalgam.Service", r"GameService.idl")


#
# Start of module "org.amalgam.Service.GameServiceModule"
#
__name__ = "lexilogic.utility.corbaModules.org.amalgam.Service.GameServiceModule"
_0_org.amalgam.Service.GameServiceModule = omniORB.openModule("lexilogic.utility.corbaModules.org.amalgam.Service.GameServiceModule", r"GameService.idl")
_0_org__POA.amalgam.Service.GameServiceModule = omniORB.openModule("lexilogic.utility.corbaModules.org__POA.amalgam.Service.GameServiceModule", r"GameService.idl")


# interface GameService
_0_org.amalgam.Service.GameServiceModule._d_GameService = (omniORB.tcInternal.tv_objref, "IDL:org/amalgam/Service/GameServiceModule/GameService:1.0", "GameService")
omniORB.typeMapping["IDL:org/amalgam/Service/GameServiceModule/GameService:1.0"] = _0_org.amalgam.Service.GameServiceModule._d_GameService
_0_org.amalgam.Service.GameServiceModule.GameService = omniORB.newEmptyClass()
class GameService :
    _NP_RepositoryId = _0_org.amalgam.Service.GameServiceModule._d_GameService[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil

    
    # typedef ... PlayerCallback
    class PlayerCallback:
        _NP_RepositoryId = "IDL:org/amalgam/Service/GameServiceModule/GameService/PlayerCallback:1.0"
        def __init__(self, *args, **kw):
            raise RuntimeError("Cannot construct objects of this type.")
    _d_PlayerCallback  = omniORB.typeMapping["IDL:org/amalgam/UIControllers/PlayerCallback:1.0"]
    _ad_PlayerCallback = (omniORB.tcInternal.tv_alias, PlayerCallback._NP_RepositoryId, "PlayerCallback", omniORB.typeMapping["IDL:org/amalgam/UIControllers/PlayerCallback:1.0"])
    _tc_PlayerCallback = omniORB.tcInternal.createTypeCode(_ad_PlayerCallback)
    omniORB.registerType(PlayerCallback._NP_RepositoryId, _ad_PlayerCallback, _tc_PlayerCallback)
    
    # typedef ... Matrix
    class Matrix:
        _NP_RepositoryId = "IDL:org/amalgam/Service/GameServiceModule/GameService/Matrix:1.0"
        def __init__(self, *args, **kw):
            raise RuntimeError("Cannot construct objects of this type.")
    _d_Matrix  = (omniORB.tcInternal.tv_array, (omniORB.tcInternal.tv_array, omniORB.tcInternal.tv_char, 6), 6)
    _ad_Matrix = (omniORB.tcInternal.tv_alias, Matrix._NP_RepositoryId, "Matrix", (omniORB.tcInternal.tv_array, (omniORB.tcInternal.tv_array, omniORB.tcInternal.tv_char, 6), 6))
    _tc_Matrix = omniORB.tcInternal.createTypeCode(_ad_Matrix)
    omniORB.registerType(Matrix._NP_RepositoryId, _ad_Matrix, _tc_Matrix)


_0_org.amalgam.Service.GameServiceModule.GameService = GameService
_0_org.amalgam.Service.GameServiceModule._tc_GameService = omniORB.tcInternal.createTypeCode(_0_org.amalgam.Service.GameServiceModule._d_GameService)
omniORB.registerType(GameService._NP_RepositoryId, _0_org.amalgam.Service.GameServiceModule._d_GameService, _0_org.amalgam.Service.GameServiceModule._tc_GameService)

# GameService operations and attributes
GameService._d_matchMake = ((omniORB.typeMapping["IDL:org/amalgam/Service/GameServiceModule/GameService/PlayerCallback:1.0"], ), ((omniORB.tcInternal.tv_string,0), ), {_0_org.amalgam.Utils.Exceptions.MatchCreationFailedException._NP_RepositoryId: _0_org.amalgam.Utils.Exceptions._d_MatchCreationFailedException})
GameService._d_readyHandshake = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_long), (), None)
GameService._d_fetchWordBox = ((omniORB.tcInternal.tv_long, ), (omniORB.typeMapping["IDL:org/amalgam/Service/GameServiceModule/GameService/Matrix:1.0"], ), {_0_org.amalgam.Utils.Exceptions.WordFetchFailedException._NP_RepositoryId: _0_org.amalgam.Utils.Exceptions._d_WordFetchFailedException, _0_org.amalgam.Utils.Exceptions.InvalidRoomIDException._NP_RepositoryId: _0_org.amalgam.Utils.Exceptions._d_InvalidRoomIDException})
GameService._d_getLeaderboards = ((), ((omniORB.tcInternal.tv_string,0), ), {_0_org.amalgam.Utils.Exceptions.EmptyLeaderBoardException._NP_RepositoryId: _0_org.amalgam.Utils.Exceptions._d_EmptyLeaderBoardException})
GameService._d_verifyWord = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_long), (), {_0_org.amalgam.Utils.Exceptions.InvalidWordFormatException._NP_RepositoryId: _0_org.amalgam.Utils.Exceptions._d_InvalidWordFormatException, _0_org.amalgam.Utils.Exceptions.DuplicateWordException._NP_RepositoryId: _0_org.amalgam.Utils.Exceptions._d_DuplicateWordException})
GameService._d_validateTotalPoints = ((), (omniORB.tcInternal.tv_long, ), {_0_org.amalgam.Utils.Exceptions.InsufficientWordPointsException._NP_RepositoryId: _0_org.amalgam.Utils.Exceptions._d_InsufficientWordPointsException, _0_org.amalgam.Utils.Exceptions.InvalidTotalPointsException._NP_RepositoryId: _0_org.amalgam.Utils.Exceptions._d_InvalidTotalPointsException})
GameService._d_fetchWinner = ((omniORB.tcInternal.tv_long, ), ((omniORB.tcInternal.tv_string,0), ), {_0_org.amalgam.Utils.Exceptions.LobbyDoesNotExistException._NP_RepositoryId: _0_org.amalgam.Utils.Exceptions._d_LobbyDoesNotExistException, _0_org.amalgam.Utils.Exceptions.WinnerDoesNotExistException._NP_RepositoryId: _0_org.amalgam.Utils.Exceptions._d_WinnerDoesNotExistException})
GameService._d_playerReady = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_long), ((omniORB.tcInternal.tv_string,0), ), None)

# GameService object reference
class _objref_GameService (CORBA.Object):
    _NP_RepositoryId = GameService._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def matchMake(self, *args):
        return self._obj.invoke("matchMake", _0_org.amalgam.Service.GameServiceModule.GameService._d_matchMake, args)

    def readyHandshake(self, *args):
        return self._obj.invoke("readyHandshake", _0_org.amalgam.Service.GameServiceModule.GameService._d_readyHandshake, args)

    def fetchWordBox(self, *args):
        return self._obj.invoke("fetchWordBox", _0_org.amalgam.Service.GameServiceModule.GameService._d_fetchWordBox, args)

    def getLeaderboards(self, *args):
        return self._obj.invoke("getLeaderboards", _0_org.amalgam.Service.GameServiceModule.GameService._d_getLeaderboards, args)

    def verifyWord(self, *args):
        return self._obj.invoke("verifyWord", _0_org.amalgam.Service.GameServiceModule.GameService._d_verifyWord, args)

    def validateTotalPoints(self, *args):
        return self._obj.invoke("validateTotalPoints", _0_org.amalgam.Service.GameServiceModule.GameService._d_validateTotalPoints, args)

    def fetchWinner(self, *args):
        return self._obj.invoke("fetchWinner", _0_org.amalgam.Service.GameServiceModule.GameService._d_fetchWinner, args)

    def playerReady(self, *args):
        return self._obj.invoke("playerReady", _0_org.amalgam.Service.GameServiceModule.GameService._d_playerReady, args)

omniORB.registerObjref(GameService._NP_RepositoryId, _objref_GameService)
_0_org.amalgam.Service.GameServiceModule._objref_GameService = _objref_GameService
del GameService, _objref_GameService

# GameService skeleton
__name__ = "lexilogic.utility.corbaModules.org__POA.amalgam.Service.GameServiceModule"
class GameService (PortableServer.Servant):
    _NP_RepositoryId = _0_org.amalgam.Service.GameServiceModule.GameService._NP_RepositoryId


    _omni_op_d = {"matchMake": _0_org.amalgam.Service.GameServiceModule.GameService._d_matchMake, "readyHandshake": _0_org.amalgam.Service.GameServiceModule.GameService._d_readyHandshake, "fetchWordBox": _0_org.amalgam.Service.GameServiceModule.GameService._d_fetchWordBox, "getLeaderboards": _0_org.amalgam.Service.GameServiceModule.GameService._d_getLeaderboards, "verifyWord": _0_org.amalgam.Service.GameServiceModule.GameService._d_verifyWord, "validateTotalPoints": _0_org.amalgam.Service.GameServiceModule.GameService._d_validateTotalPoints, "fetchWinner": _0_org.amalgam.Service.GameServiceModule.GameService._d_fetchWinner, "playerReady": _0_org.amalgam.Service.GameServiceModule.GameService._d_playerReady}

GameService._omni_skeleton = GameService
_0_org__POA.amalgam.Service.GameServiceModule.GameService = GameService
omniORB.registerSkeleton(GameService._NP_RepositoryId, GameService)
del GameService
__name__ = "lexilogic.utility.corbaModules.org.amalgam.Service.GameServiceModule"

#
# End of module "org.amalgam.Service.GameServiceModule"
#
__name__ = "lexilogic.utility.corbaModules.org.amalgam.Service"


#
# End of module "org.amalgam.Service"
#
__name__ = "lexilogic.utility.corbaModules.org.amalgam"


#
# End of module "org.amalgam"
#
__name__ = "lexilogic.utility.corbaModules.org"


#
# End of module "org"
#
__name__ = "lexilogic.utility.corbaStubs.GameService_idl"

_exported_modules = ( "lexilogic.utility.corbaModules.org", "lexilogic.utility.corbaModules.org.amalgam", "lexilogic.utility.corbaModules.org.amalgam.Service", "lexilogic.utility.corbaModules.org.amalgam.Service.GameServiceModule")

# The end.
